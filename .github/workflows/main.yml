name: Build Unity Project

#on: [push, pull_request]

on: [workflow_dispatch]

permissions:
  contents: write
  actions: read
  checks: write
  pull-requests: write
  packages: write
  
jobs:
  build:
    name: Build my project
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.build_project.outputs.buildVersion }}
      output2: ${{ env.COMMIT_ID }}
      output3: ${{ matrix.targetPlatform }} 
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - WebGL # WebGL. 
    steps:
      # Checkout (without LFS)
      - name: Checkout repository
        uses: actions/checkout@v4

      # Git LFS
      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v4
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard

      # Cache
      - uses: actions/cache@v4
        with:
          path: Library
          key: Library-${{ matrix.targetPlatform }}-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-${{ matrix.targetPlatform }}
            Library-

      # Test
      #- name: Run tests
      #  uses: game-ci/unity-test-runner@v4
      #  env:
      #    UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
      #    UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
      #    UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
      #  with:
      #    githubToken: ${{ secrets.GITHUB_TOKEN }}

      # - name: Extract date
      #   id: extract_date
      #   run: |
      #     COMMIT_DATE=$(date +'%Y.%m.%d')
      #     echo "COMMIT_DATE=${COMMIT_DATE}" >> $GITHUB_ENV
      #     echo "$COMMIT_DATE"

      - name: Get commit message header
        id: get_commit_message
        run: |
          COMMIT_ID=$(git log -1 --pretty=%h)
          echo "COMMIT_ID=${COMMIT_ID}" >> $GITHUB_ENV
          echo "$COMMIT_ID"
        
      # Build
      - name: Build project
        id: build_project
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          VERSION: 0.0.1
        with:
          targetPlatform: ${{ matrix.targetPlatform }}
          allowDirtyBuild: true
          versioning: Custom
          version: 0.0.1

      - name: Edit index.html
        id: edit_index_html
        run: |
            set -x
            export INDEX=$(find ./ -name index.html)
            sudo sed -i 's/width=960 height=600/width=auto height=auto/' $INDEX
            sudo sed -i 's/style="width: 960px; height: 600px;/style="width: 100%; height: 100%;/' $INDEX
            sudo sed -i 's/});/});\n      var WAMScore = 0; var getWAMScore = msg => (WAMScore = parseInt(msg), console.log("Win:" + WAMScore));/' $INDEX
      
      # Output
      - name: Upload build artifacts
        id: upload_build_artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.targetPlatform }}_${{ steps.build_project.outputs.buildVersion }}_${{ env.COMMIT_ID }}.zip
          path: build/${{ matrix.targetPlatform }}
        

  release:
    name: Release project
    needs: build
    runs-on: ubuntu-latest
    steps:   
      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        env:
          BUILD_PLATFORM: ${{ needs.build.outputs.output3 }}
        with:
          path: build/${{ env.BUILD_PLATFORM }}
        
      # Create a release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BUILD_VERSION: ${{ needs.build.outputs.output1 }}
          BUILD_COMMIT_ID: ${{ needs.build.outputs.output2 }}
          BUILD_PLATFORM: ${{ needs.build.outputs.output3 }}
        with:
          tag_name: ${{ env.BUILD_PLATFORM }}_${{ env.BUILD_VERSION }}_${{ env.BUILD_COMMIT_ID }}
          release_name: ${{ env.BUILD_PLATFORM }}_${{ env.BUILD_VERSION }}_${{ env.BUILD_COMMIT_ID }}
          draft: false
          prerelease: false

      # Upload build artifacts to the release
      - name: Upload Release Asset
        id: upload_release_asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BUILD_VERSION: ${{ needs.build.outputs.output1 }}
          BUILD_COMMIT_ID: ${{ needs.build.outputs.output2 }}
          BUILD_PLATFORM: ${{ needs.build.outputs.output3 }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/${{ env.BUILD_PLATFORM }}
          asset_name: ${{ env.BUILD_PLATFORM }}_${{ env.BUILD_VERSION }}_${{ env.BUILD_COMMIT_ID }}.zip
          asset_content_type: application/zip

